language: c

sudo: false

addons:
  apt:
    packages:
      - rubygems

notifications:
  email: false

env:
  global:
    - CONDA_CHANNELS='conda-forge'
    - CONDA_CHANNEL_PRIORITY=True
    - MATPLOTLIB_VERSION=1.5
    - NUMPY_VERSION=1.11
    - ASTROPY_VERSION=1.3
    - IPYTHON_VERSION=5
    - PYTEST_ARGS="--cov glue -vs"
    - NO_CFG_FILES=false
    - QT_PKG=pyqt
    - SETUP_XVFB=True
    # Note that we need to specify requests 2.9 because of a bug in the version check in linkchecker, and we can't use conda since requests 2.9 won't exist for e.g. Python 3.6
    - CONDA_DEPENDENCIES="nomkl pip dill ipython matplotlib scipy cython h5py pygments pyzmq scikit-image pandas sphinx xlrd pillow pytest mock coverage pyyaml sphinx_rtd_theme qtpy traitlets ipykernel qtconsole"
    - PIP_DEPENDENCIES="pytest-cov coveralls pyavm astrodendro awscli plotly spectral-cube requests==2.9"
    - secure: NvQVc3XmmjXNVKrmaD31IgltsOImlnt3frAl4wU0pM223iejr7V57hz/V5Isx6sTANWEiRBMG27v2T8e5IiB7DQTxFUleZk3DWXQV1grw/GarEGUawXAgwDWpF0AE/7BRVJYqo2Elgaqf28+Jkun8ewvfPCiEROD2jWEpnZj+IQ=
    - secure: "SU9BYH8d9eNigypG3lC83s0NY6Mq9AHGKXyEGeXDtz1npJIC1KHdzPMP1v1K3dzCgl1p6ReMXPjZMCENyfNkad/xvzTzGk0Nu/4BjihrUPV6+ratVeLpv0JLm8ikh8q+sZURkdtzUOlds+Hfn5ku4LdpT87tcKHY9TINAGA34ZM="
    - AWS_ACCESS_KEY_ID: AKIAI2ERWDHLW3W24X3A
    - AWS_SECRET_ACCESS_KEY: $AWS_SECRET_KEY_ID

matrix:

    # Don't wait for allowed failures
    fast_finish: true

    include:

        # PyQt5
        - os: linux
          env: PYTHON_VERSION=2.7
               QT_PKG=pyqt5

before_install:

  # Prepare dependency list. Note that in future, PyQt5 will be the pyqt conda
  # package with a version of 5.x rather than a pyqt5 package, so we explicitly
  # request pyqt=4 for PyQt4.
  - if [[ $QT_PKG == pyside ]]; then export CONDA_DEPENDENCIES="pyside "$CONDA_DEPENDENCIES; fi
  - if [[ $QT_PKG == pyqt ]]; then export CONDA_DEPENDENCIES="pyqt=4 icu=56 "$CONDA_DEPENDENCIES; fi
  - if [[ $QT_PKG == pyqt5 ]]; then export CONDA_DEPENDENCIES="pyqt=5 "$CONDA_DEPENDENCIES; fi

  # Documentation dependencies
  - if [ $DOC_TRIGGER ]; then export PIP_DEPENDENCIES="sphinx-automodapi numpydoc linkchecker "$PIP_DEPENDENCIES; fi

  # Install ci-helpers and set up conda
  - git clone git://github.com/astropy/ci-helpers.git
  - source ci-helpers/travis/setup_conda_$TRAVIS_OS_NAME.sh

  # setup tools to trigger mac buildbot
  - if [ $TRAVIS_PULL_REQUEST == false && $APP_TRIGGER ]; then source .setup_app_trigger.sh; fi
  - if [ $TRAVIS_BRANCH = master ]; then export S3_DIR=latest; else export S3_DIR=$TRAVIS_BRANCH; fi

  # now set up a plugin configuration file with some plugins disabled. This is
  # to make sure that when we run the tests, glue will ignore this
  # configuration and will instead run tests for all plugins.
  - if [[ $NO_CFG_FILES == false ]]; then mkdir ~/.glue; printf "[plugins]\nspectrum_tool = 0\n" >> ~/.glue/plugins.cfg; fi

install:

  - LC_ALL=C

  # Uninstall PyQt if we are using PySide
  - if [ $QT_PKG == pyside ]; then conda remove --no-pin --force pyqt sip || true; fi

  - if [[ $QT_PKG == pyqt5 ]]; then
      export QT_QPA_PLATFORM_PLUGIN_PATH=$HOME/miniconda/envs/test/lib/qt5/plugins/platforms;
      export QT_DEBUG_PLUGINS=1;
    fi

  # Uninstall any version of Qt if QT_PKG is False, and remove all qt
  # sub-directories
  - if [[ $QT_PKG == False ]]; then
      sed -i.bak '/qtpy/d' setup.py;
      conda remove --no-pin --force qtpy || true;
      conda remove --no-pin --force pyqt || true;
      conda remove --no-pin --force pyside || true;
      conda remove --no-pin --force qt || true;
      pip uninstall --yes qtpy || true;
      find . -name "qt" -type d -exec rm -r {} \; || true;
      rm glue/external/qt.py || true;
    fi

  # Set MPLBACKEND to Agg by default - this will get overriden if Qt is present,
  # but it avoids having Matplotlib default to the osx backend on MacOS X
  - export MPLBACKEND='Agg';

  # List installed packages - use the export command so as to be able to
  # reproduce the exact environment locally. Do this before installing glue
  # since we don't want glue to appear in the list of packages for the
  # environment.
  - conda env export

  # We need to install glue in order to make sure that the entry points are
  # installed.
  - python setup.py install

  # List installed packages again - just to check if any packages got installed
  # in the previous step.
  - conda env export

script:

  - python -c 'import IPython.utils'
  - python -c 'from IPython import get_ipython'
  - python -c 'import IPython.utils.py3compat as py3compat'

  - if [[ $QT_PKG == False ]]; then glue --version; fi

  - python setup.py test -a "$PYTEST_ARGS";

  # In the following, we use separate if statements for each line, to make
  # sure the exit code from each one is taken into account for the overall
  # exit code.
  - if [ $DOC_TRIGGER ]; then cd doc; make html 2> warnings.log; cd ..; fi
  - if [ $DOC_TRIGGER ]; then cat doc/warnings.log; fi
  # make sure stderr was empty, i.e. no warnings
  - if [ $DOC_TRIGGER ]; then test ! -s doc/warnings.log; fi
  - if [ $DOC_TRIGGER ]; then linkchecker --ignore-url=".*fontawesome_webfont.*" doc/_build/html; fi

after_success:

  # Coverage testing
  - if [[ $QT_PKG != False ]]; then coveralls; fi

  # Trigger the building of the MacOS X app in the Travis-MacGlue repo
  - if [ $TRAVIS_PULL_REQUEST == false && $APP_TRIGGER ]; then ./.trigger_app_build.sh; fi
