language: c



sudo: false

addons:
  apt:
    packages:
      - rubygems

notifications:
  email: false

env:
  global:
    - CONDA_CHANNELS='conda-forge spyder-ide'
    - ASTROPY_VERSION=stable
    - ACTION='test'
    - PYTEST_ARGS="--cov glue -vs"
    - MATPLOTLIB_VERSION=1.5.0
    - NUMPY_VERSION=1.10
    - ASTROPY_VERSION=stable
    - IPYTHON_VERSION=4
    - NO_CFG_FILES=false
    - QT_PKG=pyqt
    - SETUP_XVFB=True
    # Note that we need to specify requests 2.9 because of a bug in the version check in linkchecker
    - CONDA_DEPENDENCIES="nomkl pip dill ipython matplotlib scipy cython h5py pygments pyzmq scikit-image pandas sphinx=1.2.3 xlrd pillow pytest mock coverage pyyaml requests=2.9 sphinx_rtd_theme qtpy"
    - PIP_DEPENDENCIES="pytest-cov coveralls pyavm astrodendro awscli ginga plotly spectral-cube"
    - secure: NvQVc3XmmjXNVKrmaD31IgltsOImlnt3frAl4wU0pM223iejr7V57hz/V5Isx6sTANWEiRBMG27v2T8e5IiB7DQTxFUleZk3DWXQV1grw/GarEGUawXAgwDWpF0AE/7BRVJYqo2Elgaqf28+Jkun8ewvfPCiEROD2jWEpnZj+IQ=
    - secure: "SU9BYH8d9eNigypG3lC83s0NY6Mq9AHGKXyEGeXDtz1npJIC1KHdzPMP1v1K3dzCgl1p6ReMXPjZMCENyfNkad/xvzTzGk0Nu/4BjihrUPV6+ratVeLpv0JLm8ikh8q+sZURkdtzUOlds+Hfn5ku4LdpT87tcKHY9TINAGA34ZM="
    - secure: "a+GIg14t/Ltc8PbXBCxCiQ4Of0AHthTw2b8AQ1BAE9vDMnS36G3FylWvLgAM88n68vT0YAf2hAE5/9E+gB/vA/BZVTdpVaJUmPaznAfNnBBJqJUhq08chCtHoDAHbv741eLzqkLnZ57ZUhzI11LkLd9U7yOuSD63sxK05h77rKI="
    - AWS_ACCESS_KEY_ID: AKIAI2ERWDHLW3W24X3A
    - AWS_SECRET_ACCESS_KEY: $AWS_SECRET_KEY_ID

matrix:

    # Don't wait for allowed failures
    fast_finish: true

    include:
        
        - os: linux
          env:
              - PYTHON_VERSION=3.5
              - CONDA_DEPENDENCIES='requests jinja2 pyyaml numpy pandas matplotlib'
              - PIP_DEPENDENCIES=''
              - IPYTHON_VERSION=False
              - ACTION=conda

        - os: osx
          env:
              - PYTHON_VERSION=3.5
              - CONDA_DEPENDENCIES='requests jinja2 pyyaml numpy pandas matplotlib'
              - PIP_DEPENDENCIES=''
              - IPYTHON_VERSION=False
              - ACTION=conda


before_install:

  # Prepare dependency list. Note that in future, PyQt5 will be the pyqt conda
  # package with a version of 5.x rather than a pyqt5 package, so we explicitly
  # request pyqt=4 for PyQt4.
  - if [[ $QT_PKG == pyside ]]; then export CONDA_DEPENDENCIES="pyside "$CONDA_DEPENDENCIES; fi
  - if [[ $QT_PKG == pyqt ]]; then export CONDA_DEPENDENCIES="pyqt=4 "$CONDA_DEPENDENCIES; fi
  - if [[ $QT_PKG == pyqt5 ]]; then export CONDA_DEPENDENCIES="pyqt5 "$CONDA_DEPENDENCIES; fi

  # Special cases depending on IPython version
  - if [[ $IPYTHON_VERSION == 4 ]]; then export CONDA_DEPENDENCIES="traitlets=4.1.0 qtconsole ipykernel "$CONDA_DEPENDENCIES; fi

  # Documentation dependencies
  - if [ $ACTION == docs ]; then export PIP_DEPENDENCIES="astropy-helpers linkchecker "$PIP_DEPENDENCIES; fi

  # Install ci-helpers and set up conda
  - git clone git://github.com/astropy/ci-helpers.git
  - source ci-helpers/travis/setup_conda_$TRAVIS_OS_NAME.sh

  # setup tools to trigger mac buildbot
  - if [ $TRAVIS_PULL_REQUEST == false && $APP_TRIGGER ]; then source .setup_app_trigger.sh; fi
  - if [ $TRAVIS_BRANCH = master ]; then export S3_DIR=latest; else export S3_DIR=$TRAVIS_BRANCH; fi

  # now set up a plugin configuration file with some plugins disabled. This is
  # to make sure that when we run the tests, glue will ignore this
  # configuration and will instead run tests for all plugins.
  - if [[ $NO_CFG_FILES == false ]]; then mkdir ~/.glue; printf "[plugins]\nspectrum_tool = 0\n" >> ~/.glue/plugins.cfg; fi

install:

  - LC_ALL=C

  # Uninstall PyQt if we are using PySide or PyQt5
  - if [ $QT_PKG == pyside ]; then conda remove --no-pin --force pyqt sip || true; fi
  - if [ $QT_PKG == pyqt5 ]; then conda remove --no-pin --force pyqt qt || true; fi

  - if [[ $QT_PKG == pyqt5 ]]; then
      export QT_QPA_PLATFORM_PLUGIN_PATH=$HOME/miniconda/envs/test/lib/qt5/plugins/platforms;
      export QT_DEBUG_PLUGINS=1;
    fi

  # Uninstall any version of Qt if QT_PKG is False, and remove all qt
  # sub-directories
  - if [[ $QT_PKG == False ]]; then
      conda remove --no-pin --force qtpy || true;
      conda remove --no-pin --force pyqt || true;
      conda remove --no-pin --force pyside || true;
      conda remove --no-pin --force pyqt5 || true;
      conda remove --no-pin --force qt || true;
      conda remove --no-pin --force qt5 || true;
      find . -name "qt" -type d -exec rm -r {} \; || true;
      rm glue/external/qt.py || true;
      export MPLBACKEND='Agg';
    fi

  # We need to install glue in order to make sure that the entry points are
  # installed
  - if [[ $ACTION == test || $ACTION == docs ]]; then python setup.py install; fi
  
  # Make sure a single failing command fails the build
  - set -e

script:

  - if [[ $ACTION == test && $QT_PKG == False ]]; then glue --version; fi

  - if [[ $ACTION == test ]]; then
      python setup.py test -a "$PYTEST_ARGS";
    elif [[ $ACTION == docs ]]; then
      cd doc;
      make html 2> warnings.log;
      cd ..;
      cat doc/warnings.log;
      test ! -s doc/warnings.log;
      linkchecker --ignore-url=".*fontawesome_webfont.*" doc/_build/html;
    elif [[ $ACTION == conda ]]; then
      cd .conda;
      python prepare_recipe.py;
      source activate root;
      conda install conda-build;
      conda config --set anaconda_upload no;
      conda build . --output >& conda.log;
      cat conda.log;
      set package="$(tail -f conda.log)";
      anaconda upload $package -l dev --token=$ANACONDA_TOKEN;
    fi

after_success:

  # Coverage testing
  - if [[ $QT_PKG != False ]]; then coveralls; fi

  # Trigger the building of the MacOS X app in the Travis-MacGlue repo
  - if [ $TRAVIS_PULL_REQUEST == false && $APP_TRIGGER ]; then ./.trigger_app_build.sh; fi
